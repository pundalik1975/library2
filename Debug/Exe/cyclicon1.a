;/*******************************************************
;derived from cyclic1.c
;reason: to convert it to simple timer .
;jumper selection: PB0: on/off delay
;                  PB1: hr:min/min:sec
;todo: remove second set point
;add reset key to reset to zero
;
;
;
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 9/11/2017
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 12.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;
;#define digit1() PORTC.5=1
;#define digit2() PORTC.6=1
;#define digit3() PORTC.7=1
;#define digit4() PORTC.4=1
;#define digit5() PORTC.2=1
;#define digit6() PORTC.3=1
;#define digit7() PORTC.1=1
;#define digit8() PORTC.0=1
;#define digit9() PORTD.7 = 1
;
;
;#define relay PORTD.1
;
;#define delaystatus PINB.0
;#define timestatus  PINB.1
;
;
;void clear_display(void)
; 0000 0037 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0038 PORTA =0xff;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0039 PORTC = 0x00;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 003A PORTD.7= 0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 003B 
; 0000 003C }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;
;unsigned short int led_status;
;
;#define all_led_off() led_status = 0xff;
;#define led1_on() led_status &= 0xfe
;#define led2_on() led_status &= 0xfd
;#define led3_on() led_status &= 0xfb
;#define led4_on() led_status &= 0xf7
;#define led5_on() led_status &= 0xef
;#define led6_on() led_status &= 0xdf
;#define led7_on() led_status &= 0xbf
;#define led8_on() led_status &= 0x7f
;#define led1_off() led_status |= 0x01
;#define led2_off() led_status |= 0x02
;#define led3_off() led_status |= 0x04
;#define led4_off() led_status |= 0x08
;#define led5_off() led_status |= 0x10
;#define led6_off() led_status |= 0x20
;#define led7_off() led_status |= 0x40
;#define led8_off() led_status |= 0x80
;
;#define key1 PIND.4
;#define key2 PIND.5
;#define key3 PIND.6
;#define key4 PIND.3
;#define key5 PIND.4
;#define key6 PIND.4
;#define rst_key  PIND.3
;
;
;
;void led_check(void)
; 0000 005D {
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 005E all_led_off();
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 005F if (relay) led1_off();
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0060 else led1_on();
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0061 if (!relay) led2_off();
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0062 else led2_on();
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0063 }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;
;
;// Declare your global variables here
;//                              0     1     2   3    4    5    6    7     8    9   10    11   12   13   14   15   16   1 ...
;//                              0     1     2   3    4    5    6    7     8    9    a    b    c    d    e    f    g    h ...
;unsigned char segment_table[]= {0x14,0xd7,0x4c,0x45,0x87,0x25,0x24,0x57,0x04,0x05,0x06,0xa4,0x3c,0xc4,0x2c,0x2e,0x34,0x8 ...

	.DSEG
;
;
;short int display_buffer[9];
;
;bit set_fl,sec_fl,blink_flag,blinking;
;int blink_digit;
;short int dummy[1] = {0};
;short int dummy2[1] = {0};
;unsigned int display_count;
;int ontime;
;short int message_set[]= {33,05,14,26,23,24,32,01,23,24,32,02,05,25,0,2,27,22,0,2,05,25,0,3,27,22,0,3,05,25,0,4,27,22,0, ...
;int set[10];
;short int set_item,key_count,key_rst_cnt,set_count;
;eeprom int ee_set[] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};    //uncomment for pt100 0.1 default
;bit key1_old=1,key2_old=1,key3_old=1,key4_old=1;
;bit on_fl;
;bit min_fl;
;int min_cnt;
;short int rst_count;
;
;
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0082 {

	.CSEG
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0083 // Reinitialize Timer1 value
; 0000 0084 TCNT1H=0x48E5 >> 8;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0085 TCNT1L=0x48E5 & 0xff;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0086 // Place your code here
; 0000 0087 sec_fl=1;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0088 if (timestatus ==0)     min_fl =1;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0089 
; 0000 008A blinking = ~blinking;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 008B min_cnt++;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 008C if(min_cnt>=60)
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 008D {
; 0000 008E min_cnt =0;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 008F if (timestatus ==1) min_fl =1;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0090 }
;PCODE: $00000057 VOL: 0
; 0000 0091 }
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;
;
;void display_put(int up_display, int low_display,int status,short int* message1,short int* message2)
; 0000 0095 {
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0096 if (status ==0)
;PCODE: $0000005E VOL: 0
;	up_display -> Y+8
;	low_display -> Y+6
;	status -> Y+4
;	*message1 -> Y+2
;	*message2 -> Y+0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0097         {
; 0000 0098         if (up_display <0)
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0099         {
; 0000 009A         up_display = -up_display;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 009B         up_display%=1000;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 009C         display_buffer[0]= 31;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 009D         }
; 0000 009E         else
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 009F         {
; 0000 00A0         display_buffer[0]=up_display/1000;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00A1         up_display%=1000;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00A2         }
;PCODE: $00000078 VOL: 0
; 0000 00A3         display_buffer[1]=up_display/100;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00A4         up_display%=100;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00A5         display_buffer[2]=up_display/10;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00A6         up_display%=10;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00A7         display_buffer[3]=up_display;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00A8 
; 0000 00A9         if (low_display <0)
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00AA         {
; 0000 00AB         low_display = -low_display;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00AC         low_display%=1000;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00AD         display_buffer[4]= 31;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00AE         }
; 0000 00AF         else
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00B0         {
; 0000 00B1         display_buffer[4]=low_display/1000;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00B2         low_display%=1000;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00B3         }
;PCODE: $000000A7 VOL: 0
; 0000 00B4         display_buffer[5]=low_display/100;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00B5         low_display%=100;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00B6         display_buffer[6]=low_display/10;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00B7         low_display%=10;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00B8         display_buffer[7]=low_display;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00B9         }
; 0000 00BA else if (status ==1)
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00BB         {
; 0000 00BC         message1 = message1 + (up_display *4);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00BD         display_buffer[0]=*message1;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00BE         message1++;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00BF         display_buffer[1]=*message1;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00C0         message1++;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00C1         display_buffer[2]=*message1;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00C2         message1++;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00C3         display_buffer[3]=*message1;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00C4         if (low_display <0)
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00C5         {
; 0000 00C6         low_display = -low_display;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00C7         low_display%=1000;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00C8         display_buffer[4]= 31;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00C9         }
; 0000 00CA         else
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00CB         {
; 0000 00CC         display_buffer[4]=low_display/1000;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00CD         low_display%=1000;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00CE         }
;PCODE: $000000F9 VOL: 0
; 0000 00CF         display_buffer[5]=low_display/100;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00D0         low_display%=100;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00D1         display_buffer[6]=low_display/10;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00D2         low_display%=10;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00D3         display_buffer[7]=low_display;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00D4         }
; 0000 00D5 else if (status ==2)
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00D6         {
; 0000 00D7         message1 = message1 + (up_display *4);
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00D8         display_buffer[0]=*message1;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00D9         message1++;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00DA         display_buffer[1]=*message1;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00DB         message1++;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00DC         display_buffer[2]=*message1;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00DD         message1++;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00DE         display_buffer[3]=*message1;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00DF         message2 = message2 + (low_display * 4);
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00E0         display_buffer[4]=*message2;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00E1         message2++;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00E2         display_buffer[5]=*message2;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00E3         message2++;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00E4         display_buffer[6]=*message2;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00E5         message2++;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00E6         display_buffer[7]=*message2;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00E7         }
; 0000 00E8 if (status ==3)
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00E9         {
; 0000 00EA         if (up_display <0)
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 00EB         {
; 0000 00EC         up_display = -up_display;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 00ED         up_display%=1000;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00EE         display_buffer[0]= 31;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00EF         }
; 0000 00F0         else
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00F1         {
; 0000 00F2         display_buffer[0]=up_display/1000;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00F3         up_display%=1000;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00F4         }
;PCODE: $0000016D VOL: 0
; 0000 00F5         display_buffer[1]=up_display/100;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00F6         up_display%=100;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00F7         display_buffer[2]=up_display/10;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 00F8         up_display%=10;
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 00F9         display_buffer[3]=up_display;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00FA 
; 0000 00FB         message2 = message2 + (low_display * 4);
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 00FC         display_buffer[4]=*message2;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 00FD         message2++;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 00FE         display_buffer[5]=*message2;
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 00FF         message2++;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 0100         display_buffer[6]=*message2;
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 0101         message2++;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 0102         display_buffer[7]=*message2;
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 0103         }
; 0000 0104 
; 0000 0105 // code added to blank the unused 0s
; 0000 0106 
; 0000 0107 
; 0000 0108 }
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;
;
;void display_out(short int count2)
; 0000 010C {
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 010D int asa;
; 0000 010E clear_display();
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;	count2 -> Y+2
;	asa -> R16,R17
;PCODE: $000001AB VOL: 0
; 0000 010F asa = display_buffer[count2];
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0110 asa = segment_table[asa];
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 0111 if (count2 == (7-blink_digit))
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 0112 {
; 0000 0113 if (blink_flag && blinking)
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 0114 PORTA =0xff;
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 0115 else
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 0116 PORTA = asa;
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 0117 }
;PCODE: $000001CA VOL: 0
; 0000 0118 else
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 0119 PORTA = asa;//decimal point for upper display
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 011A //if ((count2 == 6) && config_fl && (config[0]==0)&&((config_item==2)||(config_item==4)||(config_item==7)||(config_item= ...
; 0000 011B switch(count2)
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 011C         {
; 0000 011D         case 0:  digit1();
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 011E         break;
;PCODE: $000001D5 VOL: 0
; 0000 011F         case 1:  digit2();
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0120                 if (!set_fl) PORTA.2 =0;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 0121         break;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 0122         case 2:
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 0123                 digit3();
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 0124         break;
;PCODE: $000001E7 VOL: 0
; 0000 0125         case 3:if (on_fl && !set_fl) PORTA.2 =blinking;
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0126 
; 0000 0127          digit4();
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 0128         break;
;PCODE: $00000202 VOL: 0
; 0000 0129         case 4:  digit5();
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 012A         break;
;PCODE: $00000208 VOL: 0
; 0000 012B         case 5:  digit6();
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 012C                 PORTA.2 =0;
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 012D         break;
;PCODE: $00000210 VOL: 0
; 0000 012E         case 6: //if (!set_fl && !config_fl && (config[0] ==0)&& !toggle_fl) PORTC.0 =0;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 012F                 //if (set_fl && !config_fl && (config[0]==0) && (set_item ==0)) PORTC.0 =0;
; 0000 0130                 //if (!set_fl && config_fl && (config[0]==0))
; 0000 0131                  //   {
; 0000 0132                   //  if ((config_item ==1)||(config_item ==3) || (config_item==6)||(config_item==7)) PORTC.0=0;
; 0000 0133                   //  }
; 0000 0134                 digit7();
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 0135 
; 0000 0136         break;
;PCODE: $00000216 VOL: 0
; 0000 0137         case 7: //if(!on_fl && !set_fl) PORTA.2 =blinking;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 0138 
; 0000 0139                 digit8();
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 013A         break;
;PCODE: $0000021C VOL: 0
; 0000 013B         case 8: PORTA = led_status;
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 013C                 digit9();
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 013D         break;
;PCODE: $00000224 VOL: 0
; 0000 013E         }
;PCODE: $00000225 VOL: 0
; 0000 013F 
; 0000 0140 //if (config_fl && !set_fl) display_put(config_item,config[config_item],1,message_config,dummy);
; 0000 0141 //if (!config_fl && set_fl && !calib) display_put(0,set[0],1,message_set,dummy);
; 0000 0142 
; 0000 0143 }
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;
;void display_check(void)
; 0000 0146 {
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 0147     if (set_fl)
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 0148     {
; 0000 0149     display_put(set_item,set[set_item],1,message_set,dummy);
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 014A     }
; 0000 014B     else
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 014C     {
; 0000 014D     display_put(ontime,set[0],0,dummy,dummy2);
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 014E     }
;PCODE: $0000024A VOL: 0
; 0000 014F }
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;
;void increment_value(int* value,int low_limit,int high_limit,short int power)
; 0000 0152 {
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 0153 int x,y;
; 0000 0154 int a;
; 0000 0155 int b=1;
; 0000 0156 for (a=0;a<power;a++) b = b*10;
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;	*value -> Y+14
;	low_limit -> Y+12
;	high_limit -> Y+10
;	power -> Y+8
;	x -> R16,R17
;	y -> R18,R19
;	a -> R20,R21
;	b -> Y+6
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 0157 *value = *value + b;
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 0158 // added to increment 100th place if lower digits crosses 59(99:59)
; 0000 0159 x = *value /100; //higher digit
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 015A y = *value%100; //lower digit
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 015B if (y >= 60)
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0000 015C {
; 0000 015D x++;
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 015E y=0;
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 015F *value = (x *100)+y;
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 0160 }
; 0000 0161 //
; 0000 0162 if (*value < low_limit) *value = low_limit;
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0000 0163 if (*value >= high_limit) *value = high_limit;
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 0164 }
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;
;void decrement_value(int* value,int low_limit,int high_limit,short int power)
; 0000 0167 {
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 0168 int x,y;
; 0000 0169 int a;
; 0000 016A int b=1;
; 0000 016B for (a=0;a<power;a++) b = b*10;
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;	*value -> Y+14
;	low_limit -> Y+12
;	high_limit -> Y+10
;	power -> Y+8
;	x -> R16,R17
;	y -> R18,R19
;	a -> R20,R21
;	b -> Y+6
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0000 016C *value = *value- b;
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 016D x = *value /100;
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 016E y = *value %100;
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 016F if (y >=60)
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 0170 {
; 0000 0171 y=59;
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0000 0172 *value = (x*100) +y;
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 0173 
; 0000 0174 }
; 0000 0175 
; 0000 0176 if (*value < low_limit) *value = low_limit;
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 0177 if (*value >= high_limit) *value = high_limit;
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 0178 }
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;
;void ent_check(void)
; 0000 017B {
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0000 017C 
; 0000 017D     if (set_fl)
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
; 0000 017E     {
; 0000 017F     blink_digit =0;
;PCODE: $000002F6 VOL: 0
; 0000 0180     ee_set[set_item] = set[set_item];
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 0181     if(set_item >= 0)                   //changed from 1
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
; 0000 0182             {
; 0000 0183             set_fl =0;
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
; 0000 0184             set_item =0;
;PCODE: $00000308 VOL: 0
; 0000 0185             blink_digit =0;
;PCODE: $00000309 VOL: 0
; 0000 0186             blink_flag =0;
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 0187             }
; 0000 0188             else
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0000 0189             {
; 0000 018A             ee_set[set_item] = set[set_item];
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0000 018B             set_item++;
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
; 0000 018C             if (set_item >1) set_item =0;
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
; 0000 018D             }
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
; 0000 018E         display_put(set_item,set[set_item],1,message_set,dummy);
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
; 0000 018F 
; 0000 0190     }
; 0000 0191 }
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;
;void inc_check(void)
; 0000 0194 {
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
; 0000 0195     if(set_fl)
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
; 0000 0196     {
; 0000 0197     switch (set_item)
;PCODE: $00000339 VOL: 0
; 0000 0198     {
; 0000 0199     case 0: increment_value(&set[0],1,9959,blink_digit);    //temp1
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
; 0000 019A                break;
;PCODE: $00000344 VOL: 0
; 0000 019B     case 1: increment_value(&set[1],1,9959,blink_digit);   //time
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
; 0000 019C             break;
;PCODE: $00000351 VOL: 0
; 0000 019D     }
;PCODE: $00000352 VOL: 0
; 0000 019E     }
; 0000 019F 
; 0000 01A0 }
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;
;void dec_check(void)
; 0000 01A3 {
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
; 0000 01A4     if(set_fl)
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 01A5     {
; 0000 01A6     switch (set_item)
;PCODE: $0000035B VOL: 0
; 0000 01A7     {
; 0000 01A8     case 0: decrement_value(&set[0],1,9959,blink_digit);    //temp1
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
; 0000 01A9 
; 0000 01AA             break;
;PCODE: $00000366 VOL: 0
; 0000 01AB     case 1: decrement_value(&set[1],1,9959,blink_digit);   //time
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0000 01AC             break;
;PCODE: $00000373 VOL: 0
; 0000 01AD     }
;PCODE: $00000374 VOL: 0
; 0000 01AE     }
; 0000 01AF 
; 0000 01B0 
; 0000 01B1 }
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;
;void shf_check(void)
; 0000 01B4 {
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
; 0000 01B5 
; 0000 01B6     if(set_fl)
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
; 0000 01B7     {
; 0000 01B8     if (blink_flag)
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
; 0000 01B9     blink_digit++;
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
; 0000 01BA     if (blink_digit > 3)
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 0000 01BB     blink_digit=0;
;PCODE: $00000387 VOL: 0
; 0000 01BC     }
;PCODE: $00000388 VOL: 0
; 0000 01BD }
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;
;
;
;void key_check()
; 0000 01C2 {
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
; 0000 01C3      key1 = key2 = key3 = key4 = 1;
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
; 0000 01C4       key_count++;
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
; 0000 01C5  if (key_count >=100)
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
; 0000 01C6     {
; 0000 01C7       key_count=0;
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
; 0000 01C8       if (!key1 && key1_old)
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
; 0000 01C9       {
; 0000 01CA       ent_check();
;PCODE: $000003A9 VOL: 0
; 0000 01CB       key_rst_cnt =0;
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0000 01CC       }
; 0000 01CD       if (!key2 && key2_old)
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
; 0000 01CE       {
; 0000 01CF       inc_check();
;PCODE: $000003B7 VOL: 0
; 0000 01D0       key_rst_cnt=0;
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
; 0000 01D1       }
; 0000 01D2       if (!key3 && key3_old)
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
; 0000 01D3       {
; 0000 01D4       dec_check();
;PCODE: $000003C5 VOL: 0
; 0000 01D5       key_rst_cnt =0;
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
; 0000 01D6       }
; 0000 01D7       if (!key4 && key4_old)
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
; 0000 01D8       {
; 0000 01D9       shf_check();
;PCODE: $000003D3 VOL: 0
; 0000 01DA       key_rst_cnt=0;
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
; 0000 01DB       }
; 0000 01DC       key1_old = key1;
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
; 0000 01DD       key2_old = key2;
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
; 0000 01DE       key3_old = key3;
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
; 0000 01DF       key4_old = key4;
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
; 0000 01E0      }
; 0000 01E1 }
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;
;void check_set(void)
; 0000 01E4 {
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
; 0000 01E5 if (!key6)
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
; 0000 01E6 {
; 0000 01E7 set_count++;
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
; 0000 01E8 if (set_count >=5000)
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
; 0000 01E9 {
; 0000 01EA set_count =0;
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
; 0000 01EB if(!set_fl)
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
; 0000 01EC {
; 0000 01ED set[0] = ee_set[0];
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
; 0000 01EE display_put(0,set[0],1,message_set,dummy);
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
; 0000 01EF set_fl =1;
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
; 0000 01F0 blink_digit =0;
;PCODE: $0000040B VOL: 0
; 0000 01F1 blink_flag=1;
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
; 0000 01F2 }
; 0000 01F3 }
;PCODE: $0000040F VOL: 0
; 0000 01F4 
; 0000 01F5 }
;PCODE: $00000410 VOL: 0
; 0000 01F6 else
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
; 0000 01F7 set_count =0;
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
; 0000 01F8 }
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;
;void reset_timer(void)
; 0000 01FB {
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
; 0000 01FC if (!rst_key && !set_fl)
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
; 0000 01FD     {
; 0000 01FE     rst_count++;
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
; 0000 01FF     if (rst_count >=3)
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
; 0000 0200         {
; 0000 0201         on_fl =1;
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
; 0000 0202         ontime =0;
;PCODE: $0000042E VOL: 0
; 0000 0203         min_cnt =0;
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
; 0000 0204         if (delaystatus ==1)
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
; 0000 0205             {
; 0000 0206             relay =0;        //off delay
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
; 0000 0207             }
; 0000 0208         else
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
; 0000 0209             {
; 0000 020A             relay =1;       //on delay
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
; 0000 020B             }
;PCODE: $0000043A VOL: 0
; 0000 020C         }
; 0000 020D     }
;PCODE: $0000043B VOL: 0
; 0000 020E else
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
; 0000 020F     {
; 0000 0210     rst_count =0;
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
; 0000 0211     }
;PCODE: $00000440 VOL: 0
; 0000 0212 }
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;
;void process_check(void)
; 0000 0215 {
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
; 0000 0216     if (on_fl)
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
; 0000 0217     {
; 0000 0218     if (delaystatus ==1)
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
; 0000 0219         {
; 0000 021A         relay =0;        //off delay
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
; 0000 021B         }
; 0000 021C     else
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
; 0000 021D         {
; 0000 021E         relay =1;       //on delay
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
; 0000 021F         }
;PCODE: $00000451 VOL: 0
; 0000 0220     increment_value(&ontime,0,9959,0);
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
; 0000 0221         if (ontime >= set[0])
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
; 0000 0222         {
; 0000 0223         if (delaystatus ==1)
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
; 0000 0224             {
; 0000 0225             relay =1;  //off delay
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
; 0000 0226             }
; 0000 0227         else
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
; 0000 0228             {
; 0000 0229             relay=0;    //on_delay
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
; 0000 022A             }
;PCODE: $00000467 VOL: 0
; 0000 022B //        ontime=0;
; 0000 022C //        offtime =0;
; 0000 022D         on_fl=0;
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
; 0000 022E         }
; 0000 022F     }
;PCODE: $0000046B VOL: 0
; 0000 0230 
; 0000 0231 
; 0000 0232 
; 0000 0233 }
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;
;void eeprom_transfer(void)
; 0000 0236 {
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
; 0000 0237 set[0] = ee_set[0];
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
; 0000 0238 set[1] = ee_set[1];
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
; 0000 0239 }
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;
;void init(void)
; 0000 023C {
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
; 0000 023D // Input/Output Ports initialization
; 0000 023E // Port A initialization
; 0000 023F // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0240 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
; 0000 0241 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 0242 PORTA=(1<<PORTA7) | (1<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
; 0000 0243 
; 0000 0244 // Port B initialization
; 0000 0245 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0246 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
; 0000 0247 // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
; 0000 0248 PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
; 0000 0249 
; 0000 024A // Port C initialization
; 0000 024B // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 024C DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
; 0000 024D // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 024E PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
; 0000 024F 
; 0000 0250 // Port D initialization
; 0000 0251 // Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
; 0000 0252 DDRD=(1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
; 0000 0253 // State: Bit7=0 Bit6=P Bit5=P Bit4=P Bit3=P Bit2=1 Bit1=1 Bit0=1
; 0000 0254 PORTD=(0<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
; 0000 0255 
; 0000 0256 // Timer/Counter 0 initialization
; 0000 0257 // Clock source: System Clock
; 0000 0258 // Clock value: Timer 0 Stopped
; 0000 0259 // Mode: Normal top=0xFF
; 0000 025A // OC0 output: Disconnected
; 0000 025B TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
; 0000 025C TCNT0=0x00;
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
; 0000 025D OCR0=0x00;
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
; 0000 025E 
; 0000 025F // Timer/Counter 1 initialization
; 0000 0260 // Clock source: System Clock
; 0000 0261 // Clock value: 46.875 kHz
; 0000 0262 // Mode: Normal top=0xFFFF
; 0000 0263 // OC1A output: Disconnected
; 0000 0264 // OC1B output: Disconnected
; 0000 0265 // Noise Canceler: Off
; 0000 0266 // Input Capture on Falling Edge
; 0000 0267 // Timer Period: 1 s
; 0000 0268 // Timer1 Overflow Interrupt: On
; 0000 0269 // Input Capture Interrupt: Off
; 0000 026A // Compare A Match Interrupt: Off
; 0000 026B // Compare B Match Interrupt: Off
; 0000 026C TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
; 0000 026D TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
; 0000 026E TCNT1H=0x48;
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
; 0000 026F TCNT1L=0xE5;
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
; 0000 0270 ICR1H=0x00;
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
; 0000 0271 ICR1L=0x00;
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
; 0000 0272 OCR1AH=0x00;
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
; 0000 0273 OCR1AL=0x00;
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
; 0000 0274 OCR1BH=0x00;
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
; 0000 0275 OCR1BL=0x00;
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
; 0000 0276 
; 0000 0277 // Timer/Counter 2 initialization
; 0000 0278 // Clock source: System Clock
; 0000 0279 // Clock value: Timer2 Stopped
; 0000 027A // Mode: Normal top=0xFF
; 0000 027B // OC2 output: Disconnected
; 0000 027C ASSR=0<<AS2;
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
; 0000 027D TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
; 0000 027E TCNT2=0x00;
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
; 0000 027F OCR2=0x00;
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
; 0000 0280 
; 0000 0281 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0282 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
; 0000 0283 
; 0000 0284 // External Interrupt(s) initialization
; 0000 0285 // INT0: Off
; 0000 0286 // INT1: Off
; 0000 0287 // INT2: Off
; 0000 0288 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
; 0000 0289 MCUCSR=(0<<ISC2);
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0000 028A 
; 0000 028B // USART initialization
; 0000 028C // USART disabled
; 0000 028D UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
; 0000 028E 
; 0000 028F // Analog Comparator initialization
; 0000 0290 // Analog Comparator: Off
; 0000 0291 // The Analog Comparator's positive input is
; 0000 0292 // connected to the AIN0 pin
; 0000 0293 // The Analog Comparator's negative input is
; 0000 0294 // connected to the AIN1 pin
; 0000 0295 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
; 0000 0296 SFIOR=(0<<ACME);
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
; 0000 0297 
; 0000 0298 // ADC initialization
; 0000 0299 // ADC disabled
; 0000 029A ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
; 0000 029B 
; 0000 029C // SPI initialization
; 0000 029D // SPI disabled
; 0000 029E SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
; 0000 029F 
; 0000 02A0 // TWI initialization
; 0000 02A1 // TWI disabled
; 0000 02A2 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
; 0000 02A3 
; 0000 02A4 }
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;
;void main(void)
; 0000 02A7 {
;PCODE: $000004C3 VOL: 0
; 0000 02A8 // Declare your local variables here
; 0000 02A9 init();
;PCODE: $000004C4 VOL: 0
; 0000 02AA 
; 0000 02AB eeprom_transfer();
;PCODE: $000004C5 VOL: 0
; 0000 02AC // Global enable interrupts
; 0000 02AD #asm("sei")
;PCODE: $000004C6 VOL: 0
	sei
;PCODE: $000004C7 VOL: 0
; 0000 02AE on_fl =1;
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
; 0000 02AF     if (delaystatus ==1)
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
; 0000 02B0         {
; 0000 02B1         relay =0;        //off delay
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
; 0000 02B2         }
; 0000 02B3     else
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
; 0000 02B4         {
; 0000 02B5         relay =1;       //on delay
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
; 0000 02B6         }
;PCODE: $000004D4 VOL: 0
; 0000 02B7 while (1)
;PCODE: $000004D5 VOL: 0
; 0000 02B8       {
; 0000 02B9       if (sec_fl)
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
; 0000 02BA         {
; 0000 02BB         sec_fl =0;
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
; 0000 02BC         reset_timer();
;PCODE: $000004DC VOL: 0
; 0000 02BD 
; 0000 02BE         }
; 0000 02BF       if (min_fl)
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
; 0000 02C0       {
; 0000 02C1       min_fl=0;
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
; 0000 02C2       process_check();
;PCODE: $000004E4 VOL: 0
; 0000 02C3       }
; 0000 02C4 
; 0000 02C5       // Place your code here
; 0000 02C6             display_check();
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
; 0000 02C7         //display_put(timer1,timer2,0,dummy,dummy2);                       //**
; 0000 02C8       check_set();
;PCODE: $000004E7 VOL: 0
; 0000 02C9       display_out(display_count);
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
; 0000 02CA       display_count++;
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
; 0000 02CB       led_check();
;PCODE: $000004ED VOL: 0
; 0000 02CC       if(display_count >=9)
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
; 0000 02CD       {
; 0000 02CE       display_count =0;
;PCODE: $000004F1 VOL: 0
; 0000 02CF       key_check();
;PCODE: $000004F2 VOL: 0
; 0000 02D0       }
; 0000 02D1       }
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
; 0000 02D2 }
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
